#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure for a book
typedef struct Book {
    int id;
    char title[100];
    char author[100];
    struct Book* next;
} Book;

// Function prototypes
Book* addBook(Book* head, int id, const char* title, const char* author);
Book* deleteBook(Book* head, int id);
Book* searchBook(Book* head, int id);
void displayBooks(Book* head);
void freeList(Book* head);

int main() {
    Book* head = NULL;
    int choice, id;
    char title[100], author[100];

    do {
        printf("\nLibrary Management System\n");
        printf("1. Add Book\n");
        printf("2. Delete Book\n");
        printf("3. Search Book\n");
        printf("4. Display Books\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();  // to consume the newline character left by scanf

        switch (choice) {
            case 1:
                printf("Enter Book ID: ");
                scanf("%d", &id);
                getchar();
                printf("Enter Book Title: ");
                fgets(title, sizeof(title), stdin);
                title[strcspn(title, "\n")] = 0; // Remove trailing newline
                printf("Enter Book Author: ");
                fgets(author, sizeof(author), stdin);
                author[strcspn(author, "\n")] = 0; // Remove trailing newline
                head = addBook(head, id, title, author);
                break;

            case 2:
                printf("Enter Book ID to delete: ");
                scanf("%d", &id);
                head = deleteBook(head, id);
                break;

            case 3:
                printf("Enter Book ID to search: ");
                scanf("%d", &id);
                Book* found = searchBook(head, id);
                if (found) {
                    printf("Book Found:\n");
                    printf("ID: %d\n", found->id);
                    printf("Title: %s\n", found->title);
                    printf("Author: %s\n", found->author);
                } else {
                    printf("Book with ID %d not found.\n", id);
                }
                break;

            case 4:
                displayBooks(head);
                break;

            case 5:
                printf("Exiting...\n");
                freeList(head);
                break;

            default:
                printf("Invalid choice. Please try again.\n");
        }

    } while (choice != 5);

    return 0;
}

// Function to add a book at the end
Book* addBook(Book* head, int id, const char* title, const char* author) {
    Book* newBook = (Book*)malloc(sizeof(Book));
    if (!newBook) {
        printf("Memory allocation failed.\n");
        return head;
    }
    newBook->id = id;
    strcpy(newBook->title, title);
    strcpy(newBook->author, author);
    newBook->next = NULL;

    if (head == NULL) {
        return newBook;
    }

    Book* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newBook;
    return head;
}

// Function to delete a book by ID
Book* deleteBook(Book* head, int id) {
    Book* temp = head;
    Book* prev = NULL;

    while (temp != NULL && temp->id != id) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Book with ID %d not found.\n", id);
        return head;
    }

    if (prev == NULL) {
        head = temp->next;
    } else {
        prev->next = temp->next;
    }

    free(temp);
    printf("Book with ID %d deleted successfully.\n", id);
    return head;
}

// Function to search for a book by ID
Book* searchBook(Book* head, int id) {
    Book* temp = head;
    while (temp != NULL) {
        if (temp->id == id) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL;
}

// Function to display all books
void displayBooks(Book* head) {
    if (head == NULL) {
        printf("No books in the library.\n");
        return;
    }

    Book* temp = head;
    printf("\nBooks in Library:\n");
    while (temp != NULL) {
        printf("ID: %d, Title: %s, Author: %s\n", temp->id, temp->title, temp->author);
        temp = temp->next;
    }
}

// Function to free the entire list
void freeList(Book* head) {
    Book* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}
